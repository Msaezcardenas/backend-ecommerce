paths:
  /api/users/:
    get:
      summary: Traer todos los usuarios
      tags:
        - Users
      responses:
        '200':
          description: 'Se obtuvo correctamente todos los usuarios'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: 'Ocurrio un error a nivel de base de datos'
  /api/users/register:
    post:
      summary: Registrar un usuario
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateUser'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request due to validation error or duplicate email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: A user with this email already exists.
  /api/users/{uid}:
    get:
      summary: Obtiene un usuario
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario
          schema:
            $type: String
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Actualiza un usuario
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateUser'
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: elimina a  un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario
          schema:
            $type: String
            example: 63f0b95f1e6e5a3f7c876d9c
      responses:
        '200':
          description: 'The resource with the provided uid has been successfully deleted'
        '400':
          description: Invalid ID format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: The resource with the provided ID has been successfully deleted.
        '404':
          description: Resource not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: Resource with ID {id} not found.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred on the server.
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: id de mongo
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: correo del usuario
        password:
          type: String
          description: contraseña
        role:
          type: String
          description: rol del usuario
      example:
        _id: ObjectId("453k5nk34jn5as")
        first_name: Mauri
        last_name: Espinosa
        email: mauri1999@correo.com
        password: sarasa
  requestBodies:
    updateUser:
      type: object
      properties:
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: correo del usuario
        password:
          type: String
          description: contraseña
        role:
          type: String
          description: rol del usuario
      example:
        first_name: Felipe
        last_name: Espinosa
        email: felipe-espinosa@correo.com
        password: '123'
